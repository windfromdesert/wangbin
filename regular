学习正则表达式

# 第一章：正则表达式入门

以文件名做类比

+   星号*表示任意文本
+   问号?表示任意单个字符

以语言做类比

+   元字符：正则表达式的元字符提供了更强大的描述能力。
+   文字

检索文本文件：Egrep

+   行的起始和结束

    +   '^' 代表一行的开始
    +   '$' 代表一行的结束

    '^' 和 '$' 的特别之处在于，它们匹配的是一个位置，而不是具体的文本。

+   字符组

    +   匹配若干字符之一 [...] ：是在同一个位置能够匹配的若干字符，意思是'或'
    +   在字符组**内部**，字符组元字符 '-' 表示一个范围。

            H[1-6]
            H[123456]
            # 以上两者是完全一样的

            # 多重范围也是容许的
            [0-9a-fA-F]
            # 问号和点号通常被当作元字符处理，但在字符组中则不是如此
            [0-9A-Z_!.?]

        不妨把字符组看作独立的微型语言，在字符组内部和外部，关于元字符的规定是不同的。

+   排除型字符组

    +   [^...] 取代 [...] ，这个字符组就会匹配任何未列出的字符。即这个字符组开头的 '^' 表示排除的意思。

        在字符组外部， '^' 表示一个行锚点，但在字符组内部，而且必须是紧接在字符组的第一个方括号之后，它就是一个元字符。

        egrep 会在检查正则表达式之前把这些换行符去掉。

+   用点号匹配单个任意字符

    如果我们需要搜索 03/19/76、03-19-76、03.19.76，可以这样写：

    1.  egrep '03[-./]19[-./]76' word.txt

        这是一种较精确的写法，但要注意不能写成 [.-/] ，因为在字符组中 '-' 是一个连字符，[.-/] 这样写是错误的。

    2.  egrep '03.19.76' word.txt

        这种写法不够细致，因为它也能匹配这样的字符串'lottery numbers:19 203319 7639' ，如果我们对原始文本有足够的了解，知道文本中不会出现这样的内容，那这种写法就是合理的。

+   匹配任意子表达式 '|'

    '|' 意思是“或”(or)

    表示同样意思的例子：

        gr[ea]y     # 这是前面使用字符组的示例
        grey|gray
        gr(e|a)y

    注意：一个字符组只能匹配目标文本中的单个字符，而多选结构自身都可能是完整的正则表达式。

    1.  '^From|Subject|Date: '

        这里匹配的是：'^From' 或 'Subject' 或 'Date: '，实用性不大。

    2.  '^(From|Subject|Date): '

        这里匹配的是：行起始，然后是 'From' 或 'Subject' 或 'Date' 然后是 ': ' ，这在提取Email文件中的信息时很有用。

+   忽略大小写

    egrep 的命令行参数 '-i' 表示进行忽略大小写的匹配。该功能不是正则表达式语言的一部分。

+   单词分界符

    '\<' 和 '\>' ：可以使用它们来匹配单词分界的位置。

    要两个字符连在一起才具有特殊意义，称为“元字符序列”。并不是所有版本的 egrep 都支持单词分界符。

    这里，单词的起始和结束位置，不过是一系列**字母**和**数字**符号的开始和结束。

+   注意点

    在字符组内部，元字符的定义规则（及它们的意义）是不一样的。例如，在字符组外部，点号是元字符，但是在内部则不是如此。相反，连字符只有在字符组内部（这是普遍情况）才是元字符，否则就不是。脱字符在字符组外部表示一个意思，在字符组内部紧接着 '[' 时表示另一个意思，其他情况下又表示别的意思。

    不要混淆多选项和字符组。无论列出的字符有多少，字符组只能匹配一个字符。相反，多选项可以匹配任意长度的文本，每个多选项可以匹配的文本都是独立的。不过，多选项没有像字符组那样的排除功能。

+   可选项元素

    元字符 '?' 代表可选项，把它加在一个字符的后面，就表示此处容许出现这个字符，不过它的出现并非匹配成功的必要条件。

        (July|Jul) (fourth|4th|4)
        (July?) (fourth|4(th)?)     # 括号可以界定 '?' 的作用对象
        (July?) (((four|4)th)|4)

+   其他量词：重复出现

    '+' 表示之前紧邻的元素出现一次或多次

    '*' 表示之前紧邻的元素出现任意多次，或者不出现。

    与 '...?' 一样，正则表达式中的 '...*' 也是永远不会匹配失败的，区别只在于它们的匹配结果；而 '...+' 在无法进行任何一次匹配时，会报告匹配失败。

        ' ?' 可以匹配一个可能出现的空格
        ' *' 可以匹配任意多个空格

    比如HTML规范中的 '<H3 >' 或者 'H4   ' 等。把 ' *' 加入正则表达式中的可能出现（但不是必须）空格的位置，就得到 'H[1-6] *' 。
    
    <HR SIZE=14> 这样的HTML tag，可以有如下写法：

    +   <HR +SIZE *= *14 *>
    +   <HR +SIZE *= *[0-9]+ *>
    +   egrep -i <HR( +SIZE *= *[0-9]+)? *>

    小结：
    
    +   '?' 可以不出现，也可以出现一次（单次可选）
    +   '*' 可以出现无数次，也可以不出现（任意次数均可）
    +   '+' 可以出现无数次，但至少要出现一次（至少一次）

+   规定重现次数的范围：区间

    某些版本的 egrep 能够使用元字符序列来自定义重现次数的区间。

    语法：...{min,max}，如：用 [a-zA-Z]{1,5} 来匹配美国的股票代码。

+   括号及反向引用

    '\<([A-Za-z]+) +\1\>'   # 用来查找重复单词

    在支持反向引用的工具软件中，括号能够“记忆”其中的子表达式匹配的文本，不论这些文本是什么，元字符序列 '\1' 都能记住它们。

    在一个表达式中我们可以使用多个括号。再用 '\1' '\2' '\3' 等来表示第一、第二、第三组括号匹配的文本。

        % egrep -i '\<([a-z]+) +\1\>' files

+   神奇的转义

    真正匹配文本中元字符的应该是反斜线加上元字符的组合。比如：ega\.att\.com

    这样的办法适用于所有的元字符，不过在字符组内无效。（大多数程序设计语言和工具都支持字符组内部的转义，但是大多数版本的 egrep 不支持，它们会把反斜线 '\' 当作字符组内部列出的普通字符）

    如果反斜线后紧跟的不是元字符，反斜线的意义就依程序的版本而定。例如，某些版本的程序把 '\<' '\>' '\1' 当作元字符序列对待。
P50
