# bottle 笔记

处理静态文件映射

    from  bottle  import  route, run, template, static_file
    import os
    dirname = os.getcwd()           # 获取当前文件路径
    @route('/css/<filename>')
    def css_static(filename):
        return static_file(filename, root = dirname + '/css')
    @route('/hello/<name>')
    def  hello(name='tom'):
        return  template('t1')      # 在这里使用了模板文件
    run(host='localhost',  port=8080,  debug=True)

自定义错误页面

    from  bottle  import  error
    @error(404)
    def  error404(error):
        return  'Nothing  here,  sorry'
    
改变默认编码

    from  bottle  import  response
    @route('/iso')
    def  get_iso():
        0response.charset  =  'ISO-8859-15'
        return  u'This  will  be  sent  with  ISO-8859-15  encoding.'
    @route('/latin9')
    def  get_latin():
        response.content_type  =  'text/html;  charset=latin9'
        return  u'ISO-8859-15  is  also  known  as  latin9.'

设置静态文件MIME类型

    from  bottle  import  static_file
    @route('/images/<filename:re:.*\.png>#')
    def  send_image(filename):
        return  static_file(filename,  root='/path/to/image/files',  
        mimetype='image/png')

强制下载

    @route('/download/<filename:path>')
    def  download(filename):
        return  static_file(filename,  root='/path/to/static/files',  
            download=filename)

    # 如果 download 参数的值为 True ，会使用原始的文件名。

HTTP 错误

    # abort() 函数是生成 HTTP 错误页面的一个捷径。
    from  bottle  import  route,  abort
    @route('/restricted')
    def  restricted():
        abort(401,  "Sorry,  access  denied.")

重定向

    from  bottle  import  redirect
    @route('/wrong/url')
    def  wrong():
        redirect("/right/url")
    # Note:   这两个函数都会抛出  HTTPError 异常，终止回调函数的执行。

响应头

    @route('/wiki/<page>')
    def  wiki(page):
        response.set_header('Content-Language',  'en')
        response.add_header('Set-Cookie',  'name2=value2')

大多数的响应头是唯一的一些特殊的响应头在一次 response 中允许出现多次。使用 Response.add_header() 来添加一个额外的响应头。

Cookies

    @route('/hello')
    def  hello_again():
        if  request.get_cookie("visited"):
            return  "Welcome  back!  Nice  to  see  you  again"
        else:
            response.set_cookie("visited",  "yes")
            return  "Hello  there!  Nice  to  meet  you"

+   Response.set_cookie()常用的参数

    +   max_age: 最大有效时间，以秒为单位 (默认: None)
    +   expires: 一个 datetime 对象或一个 UNIX timestamp (默认: None)
    +   domain: 可访问该 Cookie 的域名 (默认: 当前域名)
    +   path: 限制 cookie 的访问路径 (默认: /)
    +   secure: 只允许在 HTTPS 链接中访问 cookie (默认: off)
    +   httponly: 防止客户端的 javascript 读取 cookie (默认: off, 要求 python 2.6 或以上版本)，如果 expires 和 max_age 两个值都没设置，cookie 会在当前的浏览器 session 失效或浏览器窗口关闭后失效。在使用 cookie 的时候，应该注意一下几个陷阱。
    +   在大多数浏览器中，cookie 的最大容量为 4KB。
    +   一些用户将浏览器设置为不接受任何 cookie。大多数搜索引擎也忽略 cookie。确保你的应用在无cookie 的时候也能工作。
    +   cookie 被储存在客户端，也没被加密。你在 cookie 中储存的任何数据，用户都可以读取。更坏的情况下，cookie 会被攻击者通过 XSS 偷走，一些已知病毒也会读取浏览器的 cookie。既然如此，就不要在 cookie 中储存任何敏感信息。
    +   cookie 可以被伪造，不要信任 cookie!

Cookie 签名

    @route('/login')
    def  login():
        username  =  request.forms.get('username')
        password  =  request.forms.get('password')
        if  check_user_credentials(username,  password):
            response.set_cookie("account",  username,  secret='some-secret-key')
            return  "Welcome  %s!  You  are  now  logged  in."  %  username
        else:
            return  "Login  failed."
    @route('/restricted')
    def  restricted_area():
        username  =  request.get_cookie("account",  secret='some-secret-key')
        if  username:
            return  "Hello  %s.  Welcome  back."  %  username
        else:
            return  "You  are  not  logged  in.  Access  denied."

Warning:   签名 cookie 在客户端不加密，也没有写保护。给 cookie 签名的主要意义在于在 cookie 中存储序列化对象和防止伪造 cookie，依然不要在 cookie 中存储敏感信息。
